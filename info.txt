-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.9 from Parser.y
-----------------------------------------------------------------------------

state 68 contains 2 shift/reduce conflicts.
state 146 contains 2 shift/reduce conflicts.
state 156 contains 1 shift/reduce conflicts.
state 159 contains 2 shift/reduce conflicts.

terminal '==' is unused
terminal '!=' is unused
terminal '>=' is unused
terminal '<=' is unused
terminal '<' is unused
terminal '>' is unused
terminal '[' is unused
terminal ']' is unused
terminal '++' is unused
terminal '--' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseJava -> classdef                       (0)
	classdef -> class identifier classbody             (1)
	classdef -> modifiers class identifier classbody   (2)
	modifiers -> modifiers modifier                    (3)
	modifiers -> modifier                              (4)
	modifier -> public                                 (5)
	modifier -> private                                (6)
	modifier -> final                                  (7)
	modifier -> static                                 (8)
	classbody -> '{' classbodyelements '}'             (9)
	classbody -> '{' '}'                               (10)
	classbodyelements -> classbodyelements classbodyelement   (11)
	classbodyelements -> classbodyelement              (12)
	classbodyelement -> functiondecl                   (13)
	functiondecl -> functionhead functionbody          (14)
	functionhead -> functiontype identifier functionparameters   (15)
	functionhead -> modifiers functiontype identifier functionparameters   (16)
	functionparameters -> '(' formalparameters ')'     (17)
	functionparameters -> '(' ')'                      (18)
	formalparameters -> formalparameters ',' formalparameter   (19)
	formalparameters -> formalparameter                (20)
	formalparameter -> type identifier                 (21)
	functionbody -> statement                          (22)
	statement -> '{' statements '}'                    (23)
	statement -> '{' '}'                               (24)
	statement -> if '(' exp ')' statement              (25)
	statement -> if '(' exp ')' statement else statement   (26)
	statement -> type simplename                       (27)
	statement -> return exp                            (28)
	statement -> while '(' exp ')' statement           (29)
	statement -> do statement while '(' exp ')'        (30)
	statement -> statementexpstatement                 (31)
	statements -> statements statement                 (32)
	statements -> statement                            (33)
	statementexpstatement -> assignmentstatement       (34)
	statementexpstatement -> newstatement              (35)
	newstatement -> new type '(' parameters ')'        (36)
	newstatement -> new type '(' ')'                   (37)
	assignmentstatement -> exp '=' exp                 (38)
	assignmentstatement -> exp '+=' exp                (39)
	assignmentstatement -> exp '-=' exp                (40)
	assignmentstatement -> exp '*=' exp                (41)
	assignmentstatement -> exp '/=' exp                (42)
	assignmentstatement -> exp '%=' exp                (43)
	assignmentstatement -> exp '<<=' exp               (44)
	assignmentstatement -> exp '>>=' exp               (45)
	assignmentstatement -> exp '>>>=' exp              (46)
	assignmentstatement -> exp '&=' exp                (47)
	assignmentstatement -> exp '|=' exp                (48)
	assignmentstatement -> exp '^=' exp                (49)
	parameters -> parameters exp                       (50)
	parameters -> exp                                  (51)
	name -> qualifiedname                              (52)
	name -> simplename                                 (53)
	simplename -> identifier                           (54)
	qualifiedname -> name '.' identifier               (55)
	type -> primitivetype                              (56)
	type -> referencetype                              (57)
	primitivetype -> boolean                           (58)
	primitivetype -> integer                           (59)
	primitivetype -> char                              (60)
	referencetype -> name                              (61)
	functiontype -> type                               (62)
	functiontype -> void                               (63)
	exp -> infixexp                                    (64)
	exp -> intliteral                                  (65)
	exp -> '(' type ')' exp                            (66)
	exp -> '(' exp ')'                                 (67)
	exp -> stringliteral                               (68)
	exp -> boolliteral                                 (69)
	exp -> null                                        (70)
	exp -> unaryexp                                    (71)
	infixexp -> exp '+' exp                            (72)
	infixexp -> exp '*' exp                            (73)
	infixexp -> exp '-' exp                            (74)
	infixexp -> exp '/' exp                            (75)
	infixexp -> exp '%' exp                            (76)
	infixexp -> exp '<<' exp                           (77)
	infixexp -> exp '>>' exp                           (78)
	infixexp -> exp '>>>' exp                          (79)
	infixexp -> exp '&' exp                            (80)
	infixexp -> exp '|' exp                            (81)
	infixexp -> exp '^' exp                            (82)
	infixexp -> exp '&&' exp                           (83)
	infixexp -> exp '||' exp                           (84)
	unaryexp -> '-' exp                                (85)
	unaryexp -> '+' exp                                (86)
	unaryexp -> '!' exp                                (87)
	intliteral -> literal_int                          (88)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	class          { ClassToken _ }
	'{'            { LeftBracesToken _ }
	'}'            { RightBracesToken _ }
	identifier     { IdentifierToken $$ _ }
	public         { PublicToken _ }
	private        { PrivateToken _ }
	final          { FinalToken _ }
	static         { StaticToken _ }
	'.'            { DotToken _ }
	null           { NullToken _ }
	boolean        { BooleanToken _ }
	integer        { IntToken _ }
	char           { CharToken _ }
	'('            { LeftParenthesisToken _ }
	')'            { RightParenthesisToken _ }
	void           { VoidToken _ }
	','            { CommaToken _ }
	'+'            { PlusToken _ }
	'/'            { DivideToken _ }
	'*'            { MulToken _ }
	'-'            { MinusToken _ }
	'='            { AssignmentToken _ }
	'+='           { PlusAssignmentToken _ }
	'-='           { MinusAssignmentToken _ }
	'*='           { MulAssignmentToken _ }
	'/='           { DivideAssignmentToken _ }
	'%='           { ModuloAssignmentToken _ }
	'<<='          { LShiftAssignmentToken _ }
	'>>='          { RShiftAssignmentToken _ }
	'>>>='         { UnsignedRShiftAssignmentToken _ }
	'^='           { XorAssignmentToken _ }
	'|='           { OrAssignmentToken _ }
	'&='           { AndAssignmentToken _ }
	'||'           { ConditionalOrToken _ }
	'&&'           { ConditionalAndToken _ }
	'|'            { BitOrToken _ }
	'^'            { BitXorToken _ }
	'&'            { BitAndToken _ }
	'=='           { EqualToken _ }
	'!='           { NotEqualToken _ }
	'>='           { LessEqualToken _ }
	'<='           { GreaterEqualToken _ }
	'<'            { GreaterThanToken _ }
	'>'            { LessThanToken _ }
	'>>'           { SignedRightShiftToken _ }
	'<<'           { SignedLeftShiftToken _ }
	'>>>'          { UnsignedRightShiftToken _ }
	'%'            { ModuloToken _ }
	'['            { LeftBracketToken _ }
	']'            { RightBracketToken _ }
	'++'           { PlusPlusToken _ }
	'--'           { MinusMinusToken _ }
	'!'            { NotToken _ }
	literal_int    { IntLiteralToken $$ _ }
	stringliteral  { StringLiteralToken $$ _ }
	boolliteral    { BooleanLiteralToken $$ _ }
	if             { IfToken _ }
	else           { ElseToken _ }
	return         { ReturnToken _ }
	while          { WhileToken _ }
	do             { DoToken _ }
	new            { NewToken _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseJava rule  0
	classdef        rules 1, 2
	modifiers       rules 3, 4
	modifier        rules 5, 6, 7, 8
	classbody       rules 9, 10
	classbodyelements rules 11, 12
	classbodyelement rule  13
	functiondecl    rule  14
	functionhead    rules 15, 16
	functionparameters rules 17, 18
	formalparameters rules 19, 20
	formalparameter rule  21
	functionbody    rule  22
	statement       rules 23, 24, 25, 26, 27, 28, 29, 30, 31
	statements      rules 32, 33
	statementexpstatement rules 34, 35
	newstatement    rules 36, 37
	assignmentstatement rules 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
	parameters      rules 50, 51
	name            rules 52, 53
	simplename      rule  54
	qualifiedname   rule  55
	type            rules 56, 57
	primitivetype   rules 58, 59, 60
	referencetype   rule  61
	functiontype    rules 62, 63
	exp             rules 64, 65, 66, 67, 68, 69, 70, 71
	infixexp        rules 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84
	unaryexp        rules 85, 86, 87
	intliteral      rule  88

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	class          shift, and enter state 2
	public         shift, and enter state 6
	private        shift, and enter state 7
	final          shift, and enter state 8
	static         shift, and enter state 9

	classdef       goto state 3
	modifiers      goto state 4
	modifier       goto state 5

State 1


	class          shift, and enter state 2


State 2

	classdef -> class . identifier classbody            (rule 1)

	identifier     shift, and enter state 12


State 3

	%start_parseJava -> classdef .                      (rule 0)

	%eof           accept


State 4

	classdef -> modifiers . class identifier classbody    (rule 2)
	modifiers -> modifiers . modifier                   (rule 3)

	class          shift, and enter state 11
	public         shift, and enter state 6
	private        shift, and enter state 7
	final          shift, and enter state 8
	static         shift, and enter state 9

	modifier       goto state 10

State 5

	modifiers -> modifier .                             (rule 4)

	class          reduce using rule 4
	identifier     reduce using rule 4
	public         reduce using rule 4
	private        reduce using rule 4
	final          reduce using rule 4
	static         reduce using rule 4
	boolean        reduce using rule 4
	integer        reduce using rule 4
	char           reduce using rule 4
	void           reduce using rule 4


State 6

	modifier -> public .                                (rule 5)

	class          reduce using rule 5
	identifier     reduce using rule 5
	public         reduce using rule 5
	private        reduce using rule 5
	final          reduce using rule 5
	static         reduce using rule 5
	boolean        reduce using rule 5
	integer        reduce using rule 5
	char           reduce using rule 5
	void           reduce using rule 5


State 7

	modifier -> private .                               (rule 6)

	class          reduce using rule 6
	identifier     reduce using rule 6
	public         reduce using rule 6
	private        reduce using rule 6
	final          reduce using rule 6
	static         reduce using rule 6
	boolean        reduce using rule 6
	integer        reduce using rule 6
	char           reduce using rule 6
	void           reduce using rule 6


State 8

	modifier -> final .                                 (rule 7)

	class          reduce using rule 7
	identifier     reduce using rule 7
	public         reduce using rule 7
	private        reduce using rule 7
	final          reduce using rule 7
	static         reduce using rule 7
	boolean        reduce using rule 7
	integer        reduce using rule 7
	char           reduce using rule 7
	void           reduce using rule 7


State 9

	modifier -> static .                                (rule 8)

	class          reduce using rule 8
	identifier     reduce using rule 8
	public         reduce using rule 8
	private        reduce using rule 8
	final          reduce using rule 8
	static         reduce using rule 8
	boolean        reduce using rule 8
	integer        reduce using rule 8
	char           reduce using rule 8
	void           reduce using rule 8


State 10

	modifiers -> modifiers modifier .                   (rule 3)

	class          reduce using rule 3
	identifier     reduce using rule 3
	public         reduce using rule 3
	private        reduce using rule 3
	final          reduce using rule 3
	static         reduce using rule 3
	boolean        reduce using rule 3
	integer        reduce using rule 3
	char           reduce using rule 3
	void           reduce using rule 3


State 11

	classdef -> modifiers class . identifier classbody    (rule 2)

	identifier     shift, and enter state 15


State 12

	classdef -> class identifier . classbody            (rule 1)

	'{'            shift, and enter state 14

	classbody      goto state 13

State 13

	classdef -> class identifier classbody .            (rule 1)

	%eof           reduce using rule 1


State 14

	classbody -> '{' . classbodyelements '}'            (rule 9)
	classbody -> '{' . '}'                              (rule 10)

	'}'            shift, and enter state 29
	identifier     shift, and enter state 30
	public         shift, and enter state 6
	private        shift, and enter state 7
	final          shift, and enter state 8
	static         shift, and enter state 9
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33
	void           shift, and enter state 34

	modifiers      goto state 17
	modifier       goto state 5
	classbodyelementsgoto state 18
	classbodyelementgoto state 19
	functiondecl   goto state 20
	functionhead   goto state 21
	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 25
	primitivetype  goto state 26
	referencetype  goto state 27
	functiontype   goto state 28

State 15

	classdef -> modifiers class identifier . classbody    (rule 2)

	'{'            shift, and enter state 14

	classbody      goto state 16

State 16

	classdef -> modifiers class identifier classbody .    (rule 2)

	%eof           reduce using rule 2


State 17

	modifiers -> modifiers . modifier                   (rule 3)
	functionhead -> modifiers . functiontype identifier functionparameters    (rule 16)

	identifier     shift, and enter state 30
	public         shift, and enter state 6
	private        shift, and enter state 7
	final          shift, and enter state 8
	static         shift, and enter state 9
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33
	void           shift, and enter state 34

	modifier       goto state 10
	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 25
	primitivetype  goto state 26
	referencetype  goto state 27
	functiontype   goto state 63

State 18

	classbody -> '{' classbodyelements . '}'            (rule 9)
	classbodyelements -> classbodyelements . classbodyelement    (rule 11)

	'}'            shift, and enter state 62
	identifier     shift, and enter state 30
	public         shift, and enter state 6
	private        shift, and enter state 7
	final          shift, and enter state 8
	static         shift, and enter state 9
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33
	void           shift, and enter state 34

	modifiers      goto state 17
	modifier       goto state 5
	classbodyelementgoto state 61
	functiondecl   goto state 20
	functionhead   goto state 21
	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 25
	primitivetype  goto state 26
	referencetype  goto state 27
	functiontype   goto state 28

State 19

	classbodyelements -> classbodyelement .             (rule 12)

	'}'            reduce using rule 12
	identifier     reduce using rule 12
	public         reduce using rule 12
	private        reduce using rule 12
	final          reduce using rule 12
	static         reduce using rule 12
	boolean        reduce using rule 12
	integer        reduce using rule 12
	char           reduce using rule 12
	void           reduce using rule 12


State 20

	classbodyelement -> functiondecl .                  (rule 13)

	'}'            reduce using rule 13
	identifier     reduce using rule 13
	public         reduce using rule 13
	private        reduce using rule 13
	final          reduce using rule 13
	static         reduce using rule 13
	boolean        reduce using rule 13
	integer        reduce using rule 13
	char           reduce using rule 13
	void           reduce using rule 13


State 21

	functiondecl -> functionhead . functionbody         (rule 14)

	'{'            shift, and enter state 47
	identifier     shift, and enter state 30
	null           shift, and enter state 48
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55
	if             shift, and enter state 56
	return         shift, and enter state 57
	while          shift, and enter state 58
	do             shift, and enter state 59
	new            shift, and enter state 60

	functionbody   goto state 37
	statement      goto state 38
	statementexpstatementgoto state 39
	newstatement   goto state 40
	assignmentstatementgoto state 41
	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 42
	primitivetype  goto state 26
	referencetype  goto state 27
	exp            goto state 43
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 22

	qualifiedname -> name . '.' identifier              (rule 55)
	referencetype -> name .                             (rule 61)

	identifier     reduce using rule 61
	'.'            shift, and enter state 36
	'('            reduce using rule 61
	')'            reduce using rule 61


State 23

	name -> simplename .                                (rule 53)

	identifier     reduce using rule 53
	'.'            reduce using rule 53
	'('            reduce using rule 53
	')'            reduce using rule 53


State 24

	name -> qualifiedname .                             (rule 52)

	identifier     reduce using rule 52
	'.'            reduce using rule 52
	'('            reduce using rule 52
	')'            reduce using rule 52


State 25

	functiontype -> type .                              (rule 62)

	identifier     reduce using rule 62


State 26

	type -> primitivetype .                             (rule 56)

	identifier     reduce using rule 56
	'('            reduce using rule 56
	')'            reduce using rule 56


State 27

	type -> referencetype .                             (rule 57)

	identifier     reduce using rule 57
	'('            reduce using rule 57
	')'            reduce using rule 57


State 28

	functionhead -> functiontype . identifier functionparameters    (rule 15)

	identifier     shift, and enter state 35


State 29

	classbody -> '{' '}' .                              (rule 10)

	%eof           reduce using rule 10


State 30

	simplename -> identifier .                          (rule 54)

	'{'            reduce using rule 54
	'}'            reduce using rule 54
	identifier     reduce using rule 54
	public         reduce using rule 54
	private        reduce using rule 54
	final          reduce using rule 54
	static         reduce using rule 54
	'.'            reduce using rule 54
	null           reduce using rule 54
	boolean        reduce using rule 54
	integer        reduce using rule 54
	char           reduce using rule 54
	'('            reduce using rule 54
	')'            reduce using rule 54
	void           reduce using rule 54
	'+'            reduce using rule 54
	'-'            reduce using rule 54
	'!'            reduce using rule 54
	literal_int    reduce using rule 54
	stringliteral  reduce using rule 54
	boolliteral    reduce using rule 54
	if             reduce using rule 54
	else           reduce using rule 54
	return         reduce using rule 54
	while          reduce using rule 54
	do             reduce using rule 54
	new            reduce using rule 54


State 31

	primitivetype -> boolean .                          (rule 58)

	identifier     reduce using rule 58
	'('            reduce using rule 58
	')'            reduce using rule 58


State 32

	primitivetype -> integer .                          (rule 59)

	identifier     reduce using rule 59
	'('            reduce using rule 59
	')'            reduce using rule 59


State 33

	primitivetype -> char .                             (rule 60)

	identifier     reduce using rule 60
	'('            reduce using rule 60
	')'            reduce using rule 60


State 34

	functiontype -> void .                              (rule 63)

	identifier     reduce using rule 63


State 35

	functionhead -> functiontype identifier . functionparameters    (rule 15)

	'('            shift, and enter state 106

	functionparametersgoto state 105

State 36

	qualifiedname -> name '.' . identifier              (rule 55)

	identifier     shift, and enter state 104


State 37

	functiondecl -> functionhead functionbody .         (rule 14)

	'}'            reduce using rule 14
	identifier     reduce using rule 14
	public         reduce using rule 14
	private        reduce using rule 14
	final          reduce using rule 14
	static         reduce using rule 14
	boolean        reduce using rule 14
	integer        reduce using rule 14
	char           reduce using rule 14
	void           reduce using rule 14


State 38

	functionbody -> statement .                         (rule 22)

	'}'            reduce using rule 22
	identifier     reduce using rule 22
	public         reduce using rule 22
	private        reduce using rule 22
	final          reduce using rule 22
	static         reduce using rule 22
	boolean        reduce using rule 22
	integer        reduce using rule 22
	char           reduce using rule 22
	void           reduce using rule 22


State 39

	statement -> statementexpstatement .                (rule 31)

	'{'            reduce using rule 31
	'}'            reduce using rule 31
	identifier     reduce using rule 31
	public         reduce using rule 31
	private        reduce using rule 31
	final          reduce using rule 31
	static         reduce using rule 31
	null           reduce using rule 31
	boolean        reduce using rule 31
	integer        reduce using rule 31
	char           reduce using rule 31
	'('            reduce using rule 31
	void           reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'!'            reduce using rule 31
	literal_int    reduce using rule 31
	stringliteral  reduce using rule 31
	boolliteral    reduce using rule 31
	if             reduce using rule 31
	else           reduce using rule 31
	return         reduce using rule 31
	while          reduce using rule 31
	do             reduce using rule 31
	new            reduce using rule 31


State 40

	statementexpstatement -> newstatement .             (rule 35)

	'{'            reduce using rule 35
	'}'            reduce using rule 35
	identifier     reduce using rule 35
	public         reduce using rule 35
	private        reduce using rule 35
	final          reduce using rule 35
	static         reduce using rule 35
	null           reduce using rule 35
	boolean        reduce using rule 35
	integer        reduce using rule 35
	char           reduce using rule 35
	'('            reduce using rule 35
	void           reduce using rule 35
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'!'            reduce using rule 35
	literal_int    reduce using rule 35
	stringliteral  reduce using rule 35
	boolliteral    reduce using rule 35
	if             reduce using rule 35
	else           reduce using rule 35
	return         reduce using rule 35
	while          reduce using rule 35
	do             reduce using rule 35
	new            reduce using rule 35


State 41

	statementexpstatement -> assignmentstatement .      (rule 34)

	'{'            reduce using rule 34
	'}'            reduce using rule 34
	identifier     reduce using rule 34
	public         reduce using rule 34
	private        reduce using rule 34
	final          reduce using rule 34
	static         reduce using rule 34
	null           reduce using rule 34
	boolean        reduce using rule 34
	integer        reduce using rule 34
	char           reduce using rule 34
	'('            reduce using rule 34
	void           reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'!'            reduce using rule 34
	literal_int    reduce using rule 34
	stringliteral  reduce using rule 34
	boolliteral    reduce using rule 34
	if             reduce using rule 34
	else           reduce using rule 34
	return         reduce using rule 34
	while          reduce using rule 34
	do             reduce using rule 34
	new            reduce using rule 34


State 42

	statement -> type . simplename                      (rule 27)

	identifier     shift, and enter state 30

	simplename     goto state 103

State 43

	assignmentstatement -> exp . '=' exp                (rule 38)
	assignmentstatement -> exp . '+=' exp               (rule 39)
	assignmentstatement -> exp . '-=' exp               (rule 40)
	assignmentstatement -> exp . '*=' exp               (rule 41)
	assignmentstatement -> exp . '/=' exp               (rule 42)
	assignmentstatement -> exp . '%=' exp               (rule 43)
	assignmentstatement -> exp . '<<=' exp              (rule 44)
	assignmentstatement -> exp . '>>=' exp              (rule 45)
	assignmentstatement -> exp . '>>>=' exp             (rule 46)
	assignmentstatement -> exp . '&=' exp               (rule 47)
	assignmentstatement -> exp . '|=' exp               (rule 48)
	assignmentstatement -> exp . '^=' exp               (rule 49)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'='            shift, and enter state 82
	'+='           shift, and enter state 83
	'-='           shift, and enter state 84
	'*='           shift, and enter state 85
	'/='           shift, and enter state 86
	'%='           shift, and enter state 87
	'<<='          shift, and enter state 88
	'>>='          shift, and enter state 89
	'>>>='         shift, and enter state 90
	'^='           shift, and enter state 91
	'|='           shift, and enter state 92
	'&='           shift, and enter state 93
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102


State 44

	exp -> infixexp .                                   (rule 64)

	'{'            reduce using rule 64
	'}'            reduce using rule 64
	identifier     reduce using rule 64
	public         reduce using rule 64
	private        reduce using rule 64
	final          reduce using rule 64
	static         reduce using rule 64
	null           reduce using rule 64
	boolean        reduce using rule 64
	integer        reduce using rule 64
	char           reduce using rule 64
	'('            reduce using rule 64
	')'            reduce using rule 64
	void           reduce using rule 64
	'+'            reduce using rule 64
	'/'            reduce using rule 64
	'*'            reduce using rule 64
	'-'            reduce using rule 64
	'='            reduce using rule 64
	'+='           reduce using rule 64
	'-='           reduce using rule 64
	'*='           reduce using rule 64
	'/='           reduce using rule 64
	'%='           reduce using rule 64
	'<<='          reduce using rule 64
	'>>='          reduce using rule 64
	'>>>='         reduce using rule 64
	'^='           reduce using rule 64
	'|='           reduce using rule 64
	'&='           reduce using rule 64
	'||'           reduce using rule 64
	'&&'           reduce using rule 64
	'|'            reduce using rule 64
	'^'            reduce using rule 64
	'&'            reduce using rule 64
	'>>'           reduce using rule 64
	'<<'           reduce using rule 64
	'>>>'          reduce using rule 64
	'%'            reduce using rule 64
	'!'            reduce using rule 64
	literal_int    reduce using rule 64
	stringliteral  reduce using rule 64
	boolliteral    reduce using rule 64
	if             reduce using rule 64
	else           reduce using rule 64
	return         reduce using rule 64
	while          reduce using rule 64
	do             reduce using rule 64
	new            reduce using rule 64


State 45

	exp -> unaryexp .                                   (rule 71)

	'{'            reduce using rule 71
	'}'            reduce using rule 71
	identifier     reduce using rule 71
	public         reduce using rule 71
	private        reduce using rule 71
	final          reduce using rule 71
	static         reduce using rule 71
	null           reduce using rule 71
	boolean        reduce using rule 71
	integer        reduce using rule 71
	char           reduce using rule 71
	'('            reduce using rule 71
	')'            reduce using rule 71
	void           reduce using rule 71
	'+'            reduce using rule 71
	'/'            reduce using rule 71
	'*'            reduce using rule 71
	'-'            reduce using rule 71
	'='            reduce using rule 71
	'+='           reduce using rule 71
	'-='           reduce using rule 71
	'*='           reduce using rule 71
	'/='           reduce using rule 71
	'%='           reduce using rule 71
	'<<='          reduce using rule 71
	'>>='          reduce using rule 71
	'>>>='         reduce using rule 71
	'^='           reduce using rule 71
	'|='           reduce using rule 71
	'&='           reduce using rule 71
	'||'           reduce using rule 71
	'&&'           reduce using rule 71
	'|'            reduce using rule 71
	'^'            reduce using rule 71
	'&'            reduce using rule 71
	'>>'           reduce using rule 71
	'<<'           reduce using rule 71
	'>>>'          reduce using rule 71
	'%'            reduce using rule 71
	'!'            reduce using rule 71
	literal_int    reduce using rule 71
	stringliteral  reduce using rule 71
	boolliteral    reduce using rule 71
	if             reduce using rule 71
	else           reduce using rule 71
	return         reduce using rule 71
	while          reduce using rule 71
	do             reduce using rule 71
	new            reduce using rule 71


State 46

	exp -> intliteral .                                 (rule 65)

	'{'            reduce using rule 65
	'}'            reduce using rule 65
	identifier     reduce using rule 65
	public         reduce using rule 65
	private        reduce using rule 65
	final          reduce using rule 65
	static         reduce using rule 65
	null           reduce using rule 65
	boolean        reduce using rule 65
	integer        reduce using rule 65
	char           reduce using rule 65
	'('            reduce using rule 65
	')'            reduce using rule 65
	void           reduce using rule 65
	'+'            reduce using rule 65
	'/'            reduce using rule 65
	'*'            reduce using rule 65
	'-'            reduce using rule 65
	'='            reduce using rule 65
	'+='           reduce using rule 65
	'-='           reduce using rule 65
	'*='           reduce using rule 65
	'/='           reduce using rule 65
	'%='           reduce using rule 65
	'<<='          reduce using rule 65
	'>>='          reduce using rule 65
	'>>>='         reduce using rule 65
	'^='           reduce using rule 65
	'|='           reduce using rule 65
	'&='           reduce using rule 65
	'||'           reduce using rule 65
	'&&'           reduce using rule 65
	'|'            reduce using rule 65
	'^'            reduce using rule 65
	'&'            reduce using rule 65
	'>>'           reduce using rule 65
	'<<'           reduce using rule 65
	'>>>'          reduce using rule 65
	'%'            reduce using rule 65
	'!'            reduce using rule 65
	literal_int    reduce using rule 65
	stringliteral  reduce using rule 65
	boolliteral    reduce using rule 65
	if             reduce using rule 65
	else           reduce using rule 65
	return         reduce using rule 65
	while          reduce using rule 65
	do             reduce using rule 65
	new            reduce using rule 65


State 47

	statement -> '{' . statements '}'                   (rule 23)
	statement -> '{' . '}'                              (rule 24)

	'{'            shift, and enter state 47
	'}'            shift, and enter state 77
	identifier     shift, and enter state 30
	null           shift, and enter state 48
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55
	if             shift, and enter state 56
	return         shift, and enter state 57
	while          shift, and enter state 58
	do             shift, and enter state 59
	new            shift, and enter state 60

	statement      goto state 75
	statements     goto state 76
	statementexpstatementgoto state 39
	newstatement   goto state 40
	assignmentstatementgoto state 41
	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 42
	primitivetype  goto state 26
	referencetype  goto state 27
	exp            goto state 43
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 48

	exp -> null .                                       (rule 70)

	'{'            reduce using rule 70
	'}'            reduce using rule 70
	identifier     reduce using rule 70
	public         reduce using rule 70
	private        reduce using rule 70
	final          reduce using rule 70
	static         reduce using rule 70
	null           reduce using rule 70
	boolean        reduce using rule 70
	integer        reduce using rule 70
	char           reduce using rule 70
	'('            reduce using rule 70
	')'            reduce using rule 70
	void           reduce using rule 70
	'+'            reduce using rule 70
	'/'            reduce using rule 70
	'*'            reduce using rule 70
	'-'            reduce using rule 70
	'='            reduce using rule 70
	'+='           reduce using rule 70
	'-='           reduce using rule 70
	'*='           reduce using rule 70
	'/='           reduce using rule 70
	'%='           reduce using rule 70
	'<<='          reduce using rule 70
	'>>='          reduce using rule 70
	'>>>='         reduce using rule 70
	'^='           reduce using rule 70
	'|='           reduce using rule 70
	'&='           reduce using rule 70
	'||'           reduce using rule 70
	'&&'           reduce using rule 70
	'|'            reduce using rule 70
	'^'            reduce using rule 70
	'&'            reduce using rule 70
	'>>'           reduce using rule 70
	'<<'           reduce using rule 70
	'>>>'          reduce using rule 70
	'%'            reduce using rule 70
	'!'            reduce using rule 70
	literal_int    reduce using rule 70
	stringliteral  reduce using rule 70
	boolliteral    reduce using rule 70
	if             reduce using rule 70
	else           reduce using rule 70
	return         reduce using rule 70
	while          reduce using rule 70
	do             reduce using rule 70
	new            reduce using rule 70


State 49

	exp -> '(' . type ')' exp                           (rule 66)
	exp -> '(' . exp ')'                                (rule 67)

	identifier     shift, and enter state 30
	null           shift, and enter state 48
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 73
	primitivetype  goto state 26
	referencetype  goto state 27
	exp            goto state 74
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 50

	unaryexp -> '+' . exp                               (rule 86)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 72
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 51

	unaryexp -> '-' . exp                               (rule 85)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 71
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 52

	unaryexp -> '!' . exp                               (rule 87)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 70
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 53

	intliteral -> literal_int .                         (rule 88)

	'{'            reduce using rule 88
	'}'            reduce using rule 88
	identifier     reduce using rule 88
	public         reduce using rule 88
	private        reduce using rule 88
	final          reduce using rule 88
	static         reduce using rule 88
	null           reduce using rule 88
	boolean        reduce using rule 88
	integer        reduce using rule 88
	char           reduce using rule 88
	'('            reduce using rule 88
	')'            reduce using rule 88
	void           reduce using rule 88
	'+'            reduce using rule 88
	'/'            reduce using rule 88
	'*'            reduce using rule 88
	'-'            reduce using rule 88
	'='            reduce using rule 88
	'+='           reduce using rule 88
	'-='           reduce using rule 88
	'*='           reduce using rule 88
	'/='           reduce using rule 88
	'%='           reduce using rule 88
	'<<='          reduce using rule 88
	'>>='          reduce using rule 88
	'>>>='         reduce using rule 88
	'^='           reduce using rule 88
	'|='           reduce using rule 88
	'&='           reduce using rule 88
	'||'           reduce using rule 88
	'&&'           reduce using rule 88
	'|'            reduce using rule 88
	'^'            reduce using rule 88
	'&'            reduce using rule 88
	'>>'           reduce using rule 88
	'<<'           reduce using rule 88
	'>>>'          reduce using rule 88
	'%'            reduce using rule 88
	'!'            reduce using rule 88
	literal_int    reduce using rule 88
	stringliteral  reduce using rule 88
	boolliteral    reduce using rule 88
	if             reduce using rule 88
	else           reduce using rule 88
	return         reduce using rule 88
	while          reduce using rule 88
	do             reduce using rule 88
	new            reduce using rule 88


State 54

	exp -> stringliteral .                              (rule 68)

	'{'            reduce using rule 68
	'}'            reduce using rule 68
	identifier     reduce using rule 68
	public         reduce using rule 68
	private        reduce using rule 68
	final          reduce using rule 68
	static         reduce using rule 68
	null           reduce using rule 68
	boolean        reduce using rule 68
	integer        reduce using rule 68
	char           reduce using rule 68
	'('            reduce using rule 68
	')'            reduce using rule 68
	void           reduce using rule 68
	'+'            reduce using rule 68
	'/'            reduce using rule 68
	'*'            reduce using rule 68
	'-'            reduce using rule 68
	'='            reduce using rule 68
	'+='           reduce using rule 68
	'-='           reduce using rule 68
	'*='           reduce using rule 68
	'/='           reduce using rule 68
	'%='           reduce using rule 68
	'<<='          reduce using rule 68
	'>>='          reduce using rule 68
	'>>>='         reduce using rule 68
	'^='           reduce using rule 68
	'|='           reduce using rule 68
	'&='           reduce using rule 68
	'||'           reduce using rule 68
	'&&'           reduce using rule 68
	'|'            reduce using rule 68
	'^'            reduce using rule 68
	'&'            reduce using rule 68
	'>>'           reduce using rule 68
	'<<'           reduce using rule 68
	'>>>'          reduce using rule 68
	'%'            reduce using rule 68
	'!'            reduce using rule 68
	literal_int    reduce using rule 68
	stringliteral  reduce using rule 68
	boolliteral    reduce using rule 68
	if             reduce using rule 68
	else           reduce using rule 68
	return         reduce using rule 68
	while          reduce using rule 68
	do             reduce using rule 68
	new            reduce using rule 68


State 55

	exp -> boolliteral .                                (rule 69)

	'{'            reduce using rule 69
	'}'            reduce using rule 69
	identifier     reduce using rule 69
	public         reduce using rule 69
	private        reduce using rule 69
	final          reduce using rule 69
	static         reduce using rule 69
	null           reduce using rule 69
	boolean        reduce using rule 69
	integer        reduce using rule 69
	char           reduce using rule 69
	'('            reduce using rule 69
	')'            reduce using rule 69
	void           reduce using rule 69
	'+'            reduce using rule 69
	'/'            reduce using rule 69
	'*'            reduce using rule 69
	'-'            reduce using rule 69
	'='            reduce using rule 69
	'+='           reduce using rule 69
	'-='           reduce using rule 69
	'*='           reduce using rule 69
	'/='           reduce using rule 69
	'%='           reduce using rule 69
	'<<='          reduce using rule 69
	'>>='          reduce using rule 69
	'>>>='         reduce using rule 69
	'^='           reduce using rule 69
	'|='           reduce using rule 69
	'&='           reduce using rule 69
	'||'           reduce using rule 69
	'&&'           reduce using rule 69
	'|'            reduce using rule 69
	'^'            reduce using rule 69
	'&'            reduce using rule 69
	'>>'           reduce using rule 69
	'<<'           reduce using rule 69
	'>>>'          reduce using rule 69
	'%'            reduce using rule 69
	'!'            reduce using rule 69
	literal_int    reduce using rule 69
	stringliteral  reduce using rule 69
	boolliteral    reduce using rule 69
	if             reduce using rule 69
	else           reduce using rule 69
	return         reduce using rule 69
	while          reduce using rule 69
	do             reduce using rule 69
	new            reduce using rule 69


State 56

	statement -> if . '(' exp ')' statement             (rule 25)
	statement -> if . '(' exp ')' statement else statement    (rule 26)

	'('            shift, and enter state 69


State 57

	statement -> return . exp                           (rule 28)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 68
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 58

	statement -> while . '(' exp ')' statement          (rule 29)

	'('            shift, and enter state 67


State 59

	statement -> do . statement while '(' exp ')'       (rule 30)

	'{'            shift, and enter state 47
	identifier     shift, and enter state 30
	null           shift, and enter state 48
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55
	if             shift, and enter state 56
	return         shift, and enter state 57
	while          shift, and enter state 58
	do             shift, and enter state 59
	new            shift, and enter state 60

	statement      goto state 66
	statementexpstatementgoto state 39
	newstatement   goto state 40
	assignmentstatementgoto state 41
	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 42
	primitivetype  goto state 26
	referencetype  goto state 27
	exp            goto state 43
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 60

	newstatement -> new . type '(' parameters ')'       (rule 36)
	newstatement -> new . type '(' ')'                  (rule 37)

	identifier     shift, and enter state 30
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33

	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 65
	primitivetype  goto state 26
	referencetype  goto state 27

State 61

	classbodyelements -> classbodyelements classbodyelement .    (rule 11)

	'}'            reduce using rule 11
	identifier     reduce using rule 11
	public         reduce using rule 11
	private        reduce using rule 11
	final          reduce using rule 11
	static         reduce using rule 11
	boolean        reduce using rule 11
	integer        reduce using rule 11
	char           reduce using rule 11
	void           reduce using rule 11


State 62

	classbody -> '{' classbodyelements '}' .            (rule 9)

	%eof           reduce using rule 9


State 63

	functionhead -> modifiers functiontype . identifier functionparameters    (rule 16)

	identifier     shift, and enter state 64


State 64

	functionhead -> modifiers functiontype identifier . functionparameters    (rule 16)

	'('            shift, and enter state 106

	functionparametersgoto state 144

State 65

	newstatement -> new type . '(' parameters ')'       (rule 36)
	newstatement -> new type . '(' ')'                  (rule 37)

	'('            shift, and enter state 143


State 66

	statement -> do statement . while '(' exp ')'       (rule 30)

	while          shift, and enter state 142


State 67

	statement -> while '(' . exp ')' statement          (rule 29)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 141
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 68

	statement -> return exp .                           (rule 28)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 28
	'}'            reduce using rule 28
	identifier     reduce using rule 28
	public         reduce using rule 28
	private        reduce using rule 28
	final          reduce using rule 28
	static         reduce using rule 28
	null           reduce using rule 28
	boolean        reduce using rule 28
	integer        reduce using rule 28
	char           reduce using rule 28
	'('            reduce using rule 28
	void           reduce using rule 28
	'+'            shift, and enter state 78
			(reduce using rule 28)

	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
			(reduce using rule 28)

	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 28
	literal_int    reduce using rule 28
	stringliteral  reduce using rule 28
	boolliteral    reduce using rule 28
	if             reduce using rule 28
	else           reduce using rule 28
	return         reduce using rule 28
	while          reduce using rule 28
	do             reduce using rule 28
	new            reduce using rule 28


State 69

	statement -> if '(' . exp ')' statement             (rule 25)
	statement -> if '(' . exp ')' statement else statement    (rule 26)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 140
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 70

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)
	unaryexp -> '!' exp .                               (rule 87)

	'{'            reduce using rule 87
	'}'            reduce using rule 87
	identifier     reduce using rule 87
	public         reduce using rule 87
	private        reduce using rule 87
	final          reduce using rule 87
	static         reduce using rule 87
	null           reduce using rule 87
	boolean        reduce using rule 87
	integer        reduce using rule 87
	char           reduce using rule 87
	'('            reduce using rule 87
	')'            reduce using rule 87
	void           reduce using rule 87
	'+'            reduce using rule 87
	'/'            reduce using rule 87
	'*'            reduce using rule 87
	'-'            reduce using rule 87
	'='            reduce using rule 87
	'+='           reduce using rule 87
	'-='           reduce using rule 87
	'*='           reduce using rule 87
	'/='           reduce using rule 87
	'%='           reduce using rule 87
	'<<='          reduce using rule 87
	'>>='          reduce using rule 87
	'>>>='         reduce using rule 87
	'^='           reduce using rule 87
	'|='           reduce using rule 87
	'&='           reduce using rule 87
	'||'           reduce using rule 87
	'&&'           reduce using rule 87
	'|'            reduce using rule 87
	'^'            reduce using rule 87
	'&'            reduce using rule 87
	'>>'           reduce using rule 87
	'<<'           reduce using rule 87
	'>>>'          reduce using rule 87
	'%'            reduce using rule 87
	'!'            reduce using rule 87
	literal_int    reduce using rule 87
	stringliteral  reduce using rule 87
	boolliteral    reduce using rule 87
	if             reduce using rule 87
	else           reduce using rule 87
	return         reduce using rule 87
	while          reduce using rule 87
	do             reduce using rule 87
	new            reduce using rule 87


State 71

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)
	unaryexp -> '-' exp .                               (rule 85)

	'{'            reduce using rule 85
	'}'            reduce using rule 85
	identifier     reduce using rule 85
	public         reduce using rule 85
	private        reduce using rule 85
	final          reduce using rule 85
	static         reduce using rule 85
	null           reduce using rule 85
	boolean        reduce using rule 85
	integer        reduce using rule 85
	char           reduce using rule 85
	'('            reduce using rule 85
	')'            reduce using rule 85
	void           reduce using rule 85
	'+'            reduce using rule 85
	'/'            reduce using rule 85
	'*'            reduce using rule 85
	'-'            reduce using rule 85
	'='            reduce using rule 85
	'+='           reduce using rule 85
	'-='           reduce using rule 85
	'*='           reduce using rule 85
	'/='           reduce using rule 85
	'%='           reduce using rule 85
	'<<='          reduce using rule 85
	'>>='          reduce using rule 85
	'>>>='         reduce using rule 85
	'^='           reduce using rule 85
	'|='           reduce using rule 85
	'&='           reduce using rule 85
	'||'           reduce using rule 85
	'&&'           reduce using rule 85
	'|'            reduce using rule 85
	'^'            reduce using rule 85
	'&'            reduce using rule 85
	'>>'           reduce using rule 85
	'<<'           reduce using rule 85
	'>>>'          reduce using rule 85
	'%'            reduce using rule 85
	'!'            reduce using rule 85
	literal_int    reduce using rule 85
	stringliteral  reduce using rule 85
	boolliteral    reduce using rule 85
	if             reduce using rule 85
	else           reduce using rule 85
	return         reduce using rule 85
	while          reduce using rule 85
	do             reduce using rule 85
	new            reduce using rule 85


State 72

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)
	unaryexp -> '+' exp .                               (rule 86)

	'{'            reduce using rule 86
	'}'            reduce using rule 86
	identifier     reduce using rule 86
	public         reduce using rule 86
	private        reduce using rule 86
	final          reduce using rule 86
	static         reduce using rule 86
	null           reduce using rule 86
	boolean        reduce using rule 86
	integer        reduce using rule 86
	char           reduce using rule 86
	'('            reduce using rule 86
	')'            reduce using rule 86
	void           reduce using rule 86
	'+'            reduce using rule 86
	'/'            reduce using rule 86
	'*'            reduce using rule 86
	'-'            reduce using rule 86
	'='            reduce using rule 86
	'+='           reduce using rule 86
	'-='           reduce using rule 86
	'*='           reduce using rule 86
	'/='           reduce using rule 86
	'%='           reduce using rule 86
	'<<='          reduce using rule 86
	'>>='          reduce using rule 86
	'>>>='         reduce using rule 86
	'^='           reduce using rule 86
	'|='           reduce using rule 86
	'&='           reduce using rule 86
	'||'           reduce using rule 86
	'&&'           reduce using rule 86
	'|'            reduce using rule 86
	'^'            reduce using rule 86
	'&'            reduce using rule 86
	'>>'           reduce using rule 86
	'<<'           reduce using rule 86
	'>>>'          reduce using rule 86
	'%'            reduce using rule 86
	'!'            reduce using rule 86
	literal_int    reduce using rule 86
	stringliteral  reduce using rule 86
	boolliteral    reduce using rule 86
	if             reduce using rule 86
	else           reduce using rule 86
	return         reduce using rule 86
	while          reduce using rule 86
	do             reduce using rule 86
	new            reduce using rule 86


State 73

	exp -> '(' type . ')' exp                           (rule 66)

	')'            shift, and enter state 139


State 74

	exp -> '(' exp . ')'                                (rule 67)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	')'            shift, and enter state 138
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102


State 75

	statements -> statement .                           (rule 33)

	'{'            reduce using rule 33
	'}'            reduce using rule 33
	identifier     reduce using rule 33
	null           reduce using rule 33
	boolean        reduce using rule 33
	integer        reduce using rule 33
	char           reduce using rule 33
	'('            reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'!'            reduce using rule 33
	literal_int    reduce using rule 33
	stringliteral  reduce using rule 33
	boolliteral    reduce using rule 33
	if             reduce using rule 33
	return         reduce using rule 33
	while          reduce using rule 33
	do             reduce using rule 33
	new            reduce using rule 33


State 76

	statement -> '{' statements . '}'                   (rule 23)
	statements -> statements . statement                (rule 32)

	'{'            shift, and enter state 47
	'}'            shift, and enter state 137
	identifier     shift, and enter state 30
	null           shift, and enter state 48
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55
	if             shift, and enter state 56
	return         shift, and enter state 57
	while          shift, and enter state 58
	do             shift, and enter state 59
	new            shift, and enter state 60

	statement      goto state 136
	statementexpstatementgoto state 39
	newstatement   goto state 40
	assignmentstatementgoto state 41
	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 42
	primitivetype  goto state 26
	referencetype  goto state 27
	exp            goto state 43
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 77

	statement -> '{' '}' .                              (rule 24)

	'{'            reduce using rule 24
	'}'            reduce using rule 24
	identifier     reduce using rule 24
	public         reduce using rule 24
	private        reduce using rule 24
	final          reduce using rule 24
	static         reduce using rule 24
	null           reduce using rule 24
	boolean        reduce using rule 24
	integer        reduce using rule 24
	char           reduce using rule 24
	'('            reduce using rule 24
	void           reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'!'            reduce using rule 24
	literal_int    reduce using rule 24
	stringliteral  reduce using rule 24
	boolliteral    reduce using rule 24
	if             reduce using rule 24
	else           reduce using rule 24
	return         reduce using rule 24
	while          reduce using rule 24
	do             reduce using rule 24
	new            reduce using rule 24


State 78

	infixexp -> exp '+' . exp                           (rule 72)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 135
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 79

	infixexp -> exp '/' . exp                           (rule 75)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 134
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 80

	infixexp -> exp '*' . exp                           (rule 73)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 133
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 81

	infixexp -> exp '-' . exp                           (rule 74)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 132
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 82

	assignmentstatement -> exp '=' . exp                (rule 38)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 131
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 83

	assignmentstatement -> exp '+=' . exp               (rule 39)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 130
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 84

	assignmentstatement -> exp '-=' . exp               (rule 40)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 129
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 85

	assignmentstatement -> exp '*=' . exp               (rule 41)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 128
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 86

	assignmentstatement -> exp '/=' . exp               (rule 42)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 127
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 87

	assignmentstatement -> exp '%=' . exp               (rule 43)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 126
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 88

	assignmentstatement -> exp '<<=' . exp              (rule 44)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 125
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 89

	assignmentstatement -> exp '>>=' . exp              (rule 45)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 124
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 90

	assignmentstatement -> exp '>>>=' . exp             (rule 46)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 123
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 91

	assignmentstatement -> exp '^=' . exp               (rule 49)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 122
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 92

	assignmentstatement -> exp '|=' . exp               (rule 48)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 121
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 93

	assignmentstatement -> exp '&=' . exp               (rule 47)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 120
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 94

	infixexp -> exp '||' . exp                          (rule 84)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 119
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 95

	infixexp -> exp '&&' . exp                          (rule 83)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 118
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 96

	infixexp -> exp '|' . exp                           (rule 81)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 117
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 97

	infixexp -> exp '^' . exp                           (rule 82)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 116
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 98

	infixexp -> exp '&' . exp                           (rule 80)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 115
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 99

	infixexp -> exp '>>' . exp                          (rule 78)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 114
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 100

	infixexp -> exp '<<' . exp                          (rule 77)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 113
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 101

	infixexp -> exp '>>>' . exp                         (rule 79)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 112
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 102

	infixexp -> exp '%' . exp                           (rule 76)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 111
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 103

	statement -> type simplename .                      (rule 27)

	'{'            reduce using rule 27
	'}'            reduce using rule 27
	identifier     reduce using rule 27
	public         reduce using rule 27
	private        reduce using rule 27
	final          reduce using rule 27
	static         reduce using rule 27
	null           reduce using rule 27
	boolean        reduce using rule 27
	integer        reduce using rule 27
	char           reduce using rule 27
	'('            reduce using rule 27
	void           reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'!'            reduce using rule 27
	literal_int    reduce using rule 27
	stringliteral  reduce using rule 27
	boolliteral    reduce using rule 27
	if             reduce using rule 27
	else           reduce using rule 27
	return         reduce using rule 27
	while          reduce using rule 27
	do             reduce using rule 27
	new            reduce using rule 27


State 104

	qualifiedname -> name '.' identifier .              (rule 55)

	identifier     reduce using rule 55
	'.'            reduce using rule 55
	'('            reduce using rule 55
	')'            reduce using rule 55


State 105

	functionhead -> functiontype identifier functionparameters .    (rule 15)

	'{'            reduce using rule 15
	identifier     reduce using rule 15
	null           reduce using rule 15
	boolean        reduce using rule 15
	integer        reduce using rule 15
	char           reduce using rule 15
	'('            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'!'            reduce using rule 15
	literal_int    reduce using rule 15
	stringliteral  reduce using rule 15
	boolliteral    reduce using rule 15
	if             reduce using rule 15
	return         reduce using rule 15
	while          reduce using rule 15
	do             reduce using rule 15
	new            reduce using rule 15


State 106

	functionparameters -> '(' . formalparameters ')'    (rule 17)
	functionparameters -> '(' . ')'                     (rule 18)

	identifier     shift, and enter state 30
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33
	')'            shift, and enter state 110

	formalparametersgoto state 107
	formalparametergoto state 108
	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 109
	primitivetype  goto state 26
	referencetype  goto state 27

State 107

	functionparameters -> '(' formalparameters . ')'    (rule 17)
	formalparameters -> formalparameters . ',' formalparameter    (rule 19)

	')'            shift, and enter state 153
	','            shift, and enter state 154


State 108

	formalparameters -> formalparameter .               (rule 20)

	')'            reduce using rule 20
	','            reduce using rule 20


State 109

	formalparameter -> type . identifier                (rule 21)

	identifier     shift, and enter state 152


State 110

	functionparameters -> '(' ')' .                     (rule 18)

	'{'            reduce using rule 18
	identifier     reduce using rule 18
	null           reduce using rule 18
	boolean        reduce using rule 18
	integer        reduce using rule 18
	char           reduce using rule 18
	'('            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'!'            reduce using rule 18
	literal_int    reduce using rule 18
	stringliteral  reduce using rule 18
	boolliteral    reduce using rule 18
	if             reduce using rule 18
	return         reduce using rule 18
	while          reduce using rule 18
	do             reduce using rule 18
	new            reduce using rule 18


State 111

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp '%' exp .                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 76
	'}'            reduce using rule 76
	identifier     reduce using rule 76
	public         reduce using rule 76
	private        reduce using rule 76
	final          reduce using rule 76
	static         reduce using rule 76
	null           reduce using rule 76
	boolean        reduce using rule 76
	integer        reduce using rule 76
	char           reduce using rule 76
	'('            reduce using rule 76
	')'            reduce using rule 76
	void           reduce using rule 76
	'+'            reduce using rule 76
	'/'            reduce using rule 76
	'*'            reduce using rule 76
	'-'            reduce using rule 76
	'='            reduce using rule 76
	'+='           reduce using rule 76
	'-='           reduce using rule 76
	'*='           reduce using rule 76
	'/='           reduce using rule 76
	'%='           reduce using rule 76
	'<<='          reduce using rule 76
	'>>='          reduce using rule 76
	'>>>='         reduce using rule 76
	'^='           reduce using rule 76
	'|='           reduce using rule 76
	'&='           reduce using rule 76
	'||'           reduce using rule 76
	'&&'           reduce using rule 76
	'|'            reduce using rule 76
	'^'            reduce using rule 76
	'&'            reduce using rule 76
	'>>'           reduce using rule 76
	'<<'           reduce using rule 76
	'>>>'          reduce using rule 76
	'%'            reduce using rule 76
	'!'            reduce using rule 76
	literal_int    reduce using rule 76
	stringliteral  reduce using rule 76
	boolliteral    reduce using rule 76
	if             reduce using rule 76
	else           reduce using rule 76
	return         reduce using rule 76
	while          reduce using rule 76
	do             reduce using rule 76
	new            reduce using rule 76


State 112

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp '>>>' exp .                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 79
	'}'            reduce using rule 79
	identifier     reduce using rule 79
	public         reduce using rule 79
	private        reduce using rule 79
	final          reduce using rule 79
	static         reduce using rule 79
	null           reduce using rule 79
	boolean        reduce using rule 79
	integer        reduce using rule 79
	char           reduce using rule 79
	'('            reduce using rule 79
	')'            reduce using rule 79
	void           reduce using rule 79
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'='            reduce using rule 79
	'+='           reduce using rule 79
	'-='           reduce using rule 79
	'*='           reduce using rule 79
	'/='           reduce using rule 79
	'%='           reduce using rule 79
	'<<='          reduce using rule 79
	'>>='          reduce using rule 79
	'>>>='         reduce using rule 79
	'^='           reduce using rule 79
	'|='           reduce using rule 79
	'&='           reduce using rule 79
	'||'           reduce using rule 79
	'&&'           reduce using rule 79
	'|'            reduce using rule 79
	'^'            reduce using rule 79
	'&'            reduce using rule 79
	'>>'           reduce using rule 79
	'<<'           reduce using rule 79
	'>>>'          reduce using rule 79
	'%'            shift, and enter state 102
	'!'            reduce using rule 79
	literal_int    reduce using rule 79
	stringliteral  reduce using rule 79
	boolliteral    reduce using rule 79
	if             reduce using rule 79
	else           reduce using rule 79
	return         reduce using rule 79
	while          reduce using rule 79
	do             reduce using rule 79
	new            reduce using rule 79


State 113

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp '<<' exp .                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 77
	'}'            reduce using rule 77
	identifier     reduce using rule 77
	public         reduce using rule 77
	private        reduce using rule 77
	final          reduce using rule 77
	static         reduce using rule 77
	null           reduce using rule 77
	boolean        reduce using rule 77
	integer        reduce using rule 77
	char           reduce using rule 77
	'('            reduce using rule 77
	')'            reduce using rule 77
	void           reduce using rule 77
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'='            reduce using rule 77
	'+='           reduce using rule 77
	'-='           reduce using rule 77
	'*='           reduce using rule 77
	'/='           reduce using rule 77
	'%='           reduce using rule 77
	'<<='          reduce using rule 77
	'>>='          reduce using rule 77
	'>>>='         reduce using rule 77
	'^='           reduce using rule 77
	'|='           reduce using rule 77
	'&='           reduce using rule 77
	'||'           reduce using rule 77
	'&&'           reduce using rule 77
	'|'            reduce using rule 77
	'^'            reduce using rule 77
	'&'            reduce using rule 77
	'>>'           reduce using rule 77
	'<<'           reduce using rule 77
	'>>>'          reduce using rule 77
	'%'            shift, and enter state 102
	'!'            reduce using rule 77
	literal_int    reduce using rule 77
	stringliteral  reduce using rule 77
	boolliteral    reduce using rule 77
	if             reduce using rule 77
	else           reduce using rule 77
	return         reduce using rule 77
	while          reduce using rule 77
	do             reduce using rule 77
	new            reduce using rule 77


State 114

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp '>>' exp .                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 78
	'}'            reduce using rule 78
	identifier     reduce using rule 78
	public         reduce using rule 78
	private        reduce using rule 78
	final          reduce using rule 78
	static         reduce using rule 78
	null           reduce using rule 78
	boolean        reduce using rule 78
	integer        reduce using rule 78
	char           reduce using rule 78
	'('            reduce using rule 78
	')'            reduce using rule 78
	void           reduce using rule 78
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'='            reduce using rule 78
	'+='           reduce using rule 78
	'-='           reduce using rule 78
	'*='           reduce using rule 78
	'/='           reduce using rule 78
	'%='           reduce using rule 78
	'<<='          reduce using rule 78
	'>>='          reduce using rule 78
	'>>>='         reduce using rule 78
	'^='           reduce using rule 78
	'|='           reduce using rule 78
	'&='           reduce using rule 78
	'||'           reduce using rule 78
	'&&'           reduce using rule 78
	'|'            reduce using rule 78
	'^'            reduce using rule 78
	'&'            reduce using rule 78
	'>>'           reduce using rule 78
	'<<'           reduce using rule 78
	'>>>'          reduce using rule 78
	'%'            shift, and enter state 102
	'!'            reduce using rule 78
	literal_int    reduce using rule 78
	stringliteral  reduce using rule 78
	boolliteral    reduce using rule 78
	if             reduce using rule 78
	else           reduce using rule 78
	return         reduce using rule 78
	while          reduce using rule 78
	do             reduce using rule 78
	new            reduce using rule 78


State 115

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp '&' exp .                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 80
	'}'            reduce using rule 80
	identifier     reduce using rule 80
	public         reduce using rule 80
	private        reduce using rule 80
	final          reduce using rule 80
	static         reduce using rule 80
	null           reduce using rule 80
	boolean        reduce using rule 80
	integer        reduce using rule 80
	char           reduce using rule 80
	'('            reduce using rule 80
	')'            reduce using rule 80
	void           reduce using rule 80
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'='            reduce using rule 80
	'+='           reduce using rule 80
	'-='           reduce using rule 80
	'*='           reduce using rule 80
	'/='           reduce using rule 80
	'%='           reduce using rule 80
	'<<='          reduce using rule 80
	'>>='          reduce using rule 80
	'>>>='         reduce using rule 80
	'^='           reduce using rule 80
	'|='           reduce using rule 80
	'&='           reduce using rule 80
	'||'           reduce using rule 80
	'&&'           reduce using rule 80
	'|'            reduce using rule 80
	'^'            reduce using rule 80
	'&'            reduce using rule 80
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 80
	literal_int    reduce using rule 80
	stringliteral  reduce using rule 80
	boolliteral    reduce using rule 80
	if             reduce using rule 80
	else           reduce using rule 80
	return         reduce using rule 80
	while          reduce using rule 80
	do             reduce using rule 80
	new            reduce using rule 80


State 116

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp '^' exp .                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 82
	'}'            reduce using rule 82
	identifier     reduce using rule 82
	public         reduce using rule 82
	private        reduce using rule 82
	final          reduce using rule 82
	static         reduce using rule 82
	null           reduce using rule 82
	boolean        reduce using rule 82
	integer        reduce using rule 82
	char           reduce using rule 82
	'('            reduce using rule 82
	')'            reduce using rule 82
	void           reduce using rule 82
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'='            reduce using rule 82
	'+='           reduce using rule 82
	'-='           reduce using rule 82
	'*='           reduce using rule 82
	'/='           reduce using rule 82
	'%='           reduce using rule 82
	'<<='          reduce using rule 82
	'>>='          reduce using rule 82
	'>>>='         reduce using rule 82
	'^='           reduce using rule 82
	'|='           reduce using rule 82
	'&='           reduce using rule 82
	'||'           reduce using rule 82
	'&&'           reduce using rule 82
	'|'            reduce using rule 82
	'^'            reduce using rule 82
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 82
	literal_int    reduce using rule 82
	stringliteral  reduce using rule 82
	boolliteral    reduce using rule 82
	if             reduce using rule 82
	else           reduce using rule 82
	return         reduce using rule 82
	while          reduce using rule 82
	do             reduce using rule 82
	new            reduce using rule 82


State 117

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp '|' exp .                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 81
	'}'            reduce using rule 81
	identifier     reduce using rule 81
	public         reduce using rule 81
	private        reduce using rule 81
	final          reduce using rule 81
	static         reduce using rule 81
	null           reduce using rule 81
	boolean        reduce using rule 81
	integer        reduce using rule 81
	char           reduce using rule 81
	'('            reduce using rule 81
	')'            reduce using rule 81
	void           reduce using rule 81
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'='            reduce using rule 81
	'+='           reduce using rule 81
	'-='           reduce using rule 81
	'*='           reduce using rule 81
	'/='           reduce using rule 81
	'%='           reduce using rule 81
	'<<='          reduce using rule 81
	'>>='          reduce using rule 81
	'>>>='         reduce using rule 81
	'^='           reduce using rule 81
	'|='           reduce using rule 81
	'&='           reduce using rule 81
	'||'           reduce using rule 81
	'&&'           reduce using rule 81
	'|'            reduce using rule 81
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 81
	literal_int    reduce using rule 81
	stringliteral  reduce using rule 81
	boolliteral    reduce using rule 81
	if             reduce using rule 81
	else           reduce using rule 81
	return         reduce using rule 81
	while          reduce using rule 81
	do             reduce using rule 81
	new            reduce using rule 81


State 118

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp '&&' exp .                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 83
	'}'            reduce using rule 83
	identifier     reduce using rule 83
	public         reduce using rule 83
	private        reduce using rule 83
	final          reduce using rule 83
	static         reduce using rule 83
	null           reduce using rule 83
	boolean        reduce using rule 83
	integer        reduce using rule 83
	char           reduce using rule 83
	'('            reduce using rule 83
	')'            reduce using rule 83
	void           reduce using rule 83
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'='            reduce using rule 83
	'+='           reduce using rule 83
	'-='           reduce using rule 83
	'*='           reduce using rule 83
	'/='           reduce using rule 83
	'%='           reduce using rule 83
	'<<='          reduce using rule 83
	'>>='          reduce using rule 83
	'>>>='         reduce using rule 83
	'^='           reduce using rule 83
	'|='           reduce using rule 83
	'&='           reduce using rule 83
	'||'           reduce using rule 83
	'&&'           reduce using rule 83
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 83
	literal_int    reduce using rule 83
	stringliteral  reduce using rule 83
	boolliteral    reduce using rule 83
	if             reduce using rule 83
	else           reduce using rule 83
	return         reduce using rule 83
	while          reduce using rule 83
	do             reduce using rule 83
	new            reduce using rule 83


State 119

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)
	infixexp -> exp '||' exp .                          (rule 84)

	'{'            reduce using rule 84
	'}'            reduce using rule 84
	identifier     reduce using rule 84
	public         reduce using rule 84
	private        reduce using rule 84
	final          reduce using rule 84
	static         reduce using rule 84
	null           reduce using rule 84
	boolean        reduce using rule 84
	integer        reduce using rule 84
	char           reduce using rule 84
	'('            reduce using rule 84
	')'            reduce using rule 84
	void           reduce using rule 84
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'='            reduce using rule 84
	'+='           reduce using rule 84
	'-='           reduce using rule 84
	'*='           reduce using rule 84
	'/='           reduce using rule 84
	'%='           reduce using rule 84
	'<<='          reduce using rule 84
	'>>='          reduce using rule 84
	'>>>='         reduce using rule 84
	'^='           reduce using rule 84
	'|='           reduce using rule 84
	'&='           reduce using rule 84
	'||'           reduce using rule 84
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 84
	literal_int    reduce using rule 84
	stringliteral  reduce using rule 84
	boolliteral    reduce using rule 84
	if             reduce using rule 84
	else           reduce using rule 84
	return         reduce using rule 84
	while          reduce using rule 84
	do             reduce using rule 84
	new            reduce using rule 84


State 120

	assignmentstatement -> exp '&=' exp .               (rule 47)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 47
	'}'            reduce using rule 47
	identifier     reduce using rule 47
	public         reduce using rule 47
	private        reduce using rule 47
	final          reduce using rule 47
	static         reduce using rule 47
	null           reduce using rule 47
	boolean        reduce using rule 47
	integer        reduce using rule 47
	char           reduce using rule 47
	'('            reduce using rule 47
	void           reduce using rule 47
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 47
	literal_int    reduce using rule 47
	stringliteral  reduce using rule 47
	boolliteral    reduce using rule 47
	if             reduce using rule 47
	else           reduce using rule 47
	return         reduce using rule 47
	while          reduce using rule 47
	do             reduce using rule 47
	new            reduce using rule 47


State 121

	assignmentstatement -> exp '|=' exp .               (rule 48)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 48
	'}'            reduce using rule 48
	identifier     reduce using rule 48
	public         reduce using rule 48
	private        reduce using rule 48
	final          reduce using rule 48
	static         reduce using rule 48
	null           reduce using rule 48
	boolean        reduce using rule 48
	integer        reduce using rule 48
	char           reduce using rule 48
	'('            reduce using rule 48
	void           reduce using rule 48
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 48
	literal_int    reduce using rule 48
	stringliteral  reduce using rule 48
	boolliteral    reduce using rule 48
	if             reduce using rule 48
	else           reduce using rule 48
	return         reduce using rule 48
	while          reduce using rule 48
	do             reduce using rule 48
	new            reduce using rule 48


State 122

	assignmentstatement -> exp '^=' exp .               (rule 49)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 49
	'}'            reduce using rule 49
	identifier     reduce using rule 49
	public         reduce using rule 49
	private        reduce using rule 49
	final          reduce using rule 49
	static         reduce using rule 49
	null           reduce using rule 49
	boolean        reduce using rule 49
	integer        reduce using rule 49
	char           reduce using rule 49
	'('            reduce using rule 49
	void           reduce using rule 49
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 49
	literal_int    reduce using rule 49
	stringliteral  reduce using rule 49
	boolliteral    reduce using rule 49
	if             reduce using rule 49
	else           reduce using rule 49
	return         reduce using rule 49
	while          reduce using rule 49
	do             reduce using rule 49
	new            reduce using rule 49


State 123

	assignmentstatement -> exp '>>>=' exp .             (rule 46)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 46
	'}'            reduce using rule 46
	identifier     reduce using rule 46
	public         reduce using rule 46
	private        reduce using rule 46
	final          reduce using rule 46
	static         reduce using rule 46
	null           reduce using rule 46
	boolean        reduce using rule 46
	integer        reduce using rule 46
	char           reduce using rule 46
	'('            reduce using rule 46
	void           reduce using rule 46
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 46
	literal_int    reduce using rule 46
	stringliteral  reduce using rule 46
	boolliteral    reduce using rule 46
	if             reduce using rule 46
	else           reduce using rule 46
	return         reduce using rule 46
	while          reduce using rule 46
	do             reduce using rule 46
	new            reduce using rule 46


State 124

	assignmentstatement -> exp '>>=' exp .              (rule 45)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 45
	'}'            reduce using rule 45
	identifier     reduce using rule 45
	public         reduce using rule 45
	private        reduce using rule 45
	final          reduce using rule 45
	static         reduce using rule 45
	null           reduce using rule 45
	boolean        reduce using rule 45
	integer        reduce using rule 45
	char           reduce using rule 45
	'('            reduce using rule 45
	void           reduce using rule 45
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 45
	literal_int    reduce using rule 45
	stringliteral  reduce using rule 45
	boolliteral    reduce using rule 45
	if             reduce using rule 45
	else           reduce using rule 45
	return         reduce using rule 45
	while          reduce using rule 45
	do             reduce using rule 45
	new            reduce using rule 45


State 125

	assignmentstatement -> exp '<<=' exp .              (rule 44)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 44
	'}'            reduce using rule 44
	identifier     reduce using rule 44
	public         reduce using rule 44
	private        reduce using rule 44
	final          reduce using rule 44
	static         reduce using rule 44
	null           reduce using rule 44
	boolean        reduce using rule 44
	integer        reduce using rule 44
	char           reduce using rule 44
	'('            reduce using rule 44
	void           reduce using rule 44
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 44
	literal_int    reduce using rule 44
	stringliteral  reduce using rule 44
	boolliteral    reduce using rule 44
	if             reduce using rule 44
	else           reduce using rule 44
	return         reduce using rule 44
	while          reduce using rule 44
	do             reduce using rule 44
	new            reduce using rule 44


State 126

	assignmentstatement -> exp '%=' exp .               (rule 43)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 43
	'}'            reduce using rule 43
	identifier     reduce using rule 43
	public         reduce using rule 43
	private        reduce using rule 43
	final          reduce using rule 43
	static         reduce using rule 43
	null           reduce using rule 43
	boolean        reduce using rule 43
	integer        reduce using rule 43
	char           reduce using rule 43
	'('            reduce using rule 43
	void           reduce using rule 43
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 43
	literal_int    reduce using rule 43
	stringliteral  reduce using rule 43
	boolliteral    reduce using rule 43
	if             reduce using rule 43
	else           reduce using rule 43
	return         reduce using rule 43
	while          reduce using rule 43
	do             reduce using rule 43
	new            reduce using rule 43


State 127

	assignmentstatement -> exp '/=' exp .               (rule 42)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 42
	'}'            reduce using rule 42
	identifier     reduce using rule 42
	public         reduce using rule 42
	private        reduce using rule 42
	final          reduce using rule 42
	static         reduce using rule 42
	null           reduce using rule 42
	boolean        reduce using rule 42
	integer        reduce using rule 42
	char           reduce using rule 42
	'('            reduce using rule 42
	void           reduce using rule 42
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 42
	literal_int    reduce using rule 42
	stringliteral  reduce using rule 42
	boolliteral    reduce using rule 42
	if             reduce using rule 42
	else           reduce using rule 42
	return         reduce using rule 42
	while          reduce using rule 42
	do             reduce using rule 42
	new            reduce using rule 42


State 128

	assignmentstatement -> exp '*=' exp .               (rule 41)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 41
	'}'            reduce using rule 41
	identifier     reduce using rule 41
	public         reduce using rule 41
	private        reduce using rule 41
	final          reduce using rule 41
	static         reduce using rule 41
	null           reduce using rule 41
	boolean        reduce using rule 41
	integer        reduce using rule 41
	char           reduce using rule 41
	'('            reduce using rule 41
	void           reduce using rule 41
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 41
	literal_int    reduce using rule 41
	stringliteral  reduce using rule 41
	boolliteral    reduce using rule 41
	if             reduce using rule 41
	else           reduce using rule 41
	return         reduce using rule 41
	while          reduce using rule 41
	do             reduce using rule 41
	new            reduce using rule 41


State 129

	assignmentstatement -> exp '-=' exp .               (rule 40)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 40
	'}'            reduce using rule 40
	identifier     reduce using rule 40
	public         reduce using rule 40
	private        reduce using rule 40
	final          reduce using rule 40
	static         reduce using rule 40
	null           reduce using rule 40
	boolean        reduce using rule 40
	integer        reduce using rule 40
	char           reduce using rule 40
	'('            reduce using rule 40
	void           reduce using rule 40
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 40
	literal_int    reduce using rule 40
	stringliteral  reduce using rule 40
	boolliteral    reduce using rule 40
	if             reduce using rule 40
	else           reduce using rule 40
	return         reduce using rule 40
	while          reduce using rule 40
	do             reduce using rule 40
	new            reduce using rule 40


State 130

	assignmentstatement -> exp '+=' exp .               (rule 39)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 39
	'}'            reduce using rule 39
	identifier     reduce using rule 39
	public         reduce using rule 39
	private        reduce using rule 39
	final          reduce using rule 39
	static         reduce using rule 39
	null           reduce using rule 39
	boolean        reduce using rule 39
	integer        reduce using rule 39
	char           reduce using rule 39
	'('            reduce using rule 39
	void           reduce using rule 39
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 39
	literal_int    reduce using rule 39
	stringliteral  reduce using rule 39
	boolliteral    reduce using rule 39
	if             reduce using rule 39
	else           reduce using rule 39
	return         reduce using rule 39
	while          reduce using rule 39
	do             reduce using rule 39
	new            reduce using rule 39


State 131

	assignmentstatement -> exp '=' exp .                (rule 38)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 38
	'}'            reduce using rule 38
	identifier     reduce using rule 38
	public         reduce using rule 38
	private        reduce using rule 38
	final          reduce using rule 38
	static         reduce using rule 38
	null           reduce using rule 38
	boolean        reduce using rule 38
	integer        reduce using rule 38
	char           reduce using rule 38
	'('            reduce using rule 38
	void           reduce using rule 38
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 38
	literal_int    reduce using rule 38
	stringliteral  reduce using rule 38
	boolliteral    reduce using rule 38
	if             reduce using rule 38
	else           reduce using rule 38
	return         reduce using rule 38
	while          reduce using rule 38
	do             reduce using rule 38
	new            reduce using rule 38


State 132

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp '-' exp .                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 74
	'}'            reduce using rule 74
	identifier     reduce using rule 74
	public         reduce using rule 74
	private        reduce using rule 74
	final          reduce using rule 74
	static         reduce using rule 74
	null           reduce using rule 74
	boolean        reduce using rule 74
	integer        reduce using rule 74
	char           reduce using rule 74
	'('            reduce using rule 74
	')'            reduce using rule 74
	void           reduce using rule 74
	'+'            reduce using rule 74
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            reduce using rule 74
	'='            reduce using rule 74
	'+='           reduce using rule 74
	'-='           reduce using rule 74
	'*='           reduce using rule 74
	'/='           reduce using rule 74
	'%='           reduce using rule 74
	'<<='          reduce using rule 74
	'>>='          reduce using rule 74
	'>>>='         reduce using rule 74
	'^='           reduce using rule 74
	'|='           reduce using rule 74
	'&='           reduce using rule 74
	'||'           reduce using rule 74
	'&&'           reduce using rule 74
	'|'            reduce using rule 74
	'^'            reduce using rule 74
	'&'            reduce using rule 74
	'>>'           reduce using rule 74
	'<<'           reduce using rule 74
	'>>>'          reduce using rule 74
	'%'            shift, and enter state 102
	'!'            reduce using rule 74
	literal_int    reduce using rule 74
	stringliteral  reduce using rule 74
	boolliteral    reduce using rule 74
	if             reduce using rule 74
	else           reduce using rule 74
	return         reduce using rule 74
	while          reduce using rule 74
	do             reduce using rule 74
	new            reduce using rule 74


State 133

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp '*' exp .                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 73
	'}'            reduce using rule 73
	identifier     reduce using rule 73
	public         reduce using rule 73
	private        reduce using rule 73
	final          reduce using rule 73
	static         reduce using rule 73
	null           reduce using rule 73
	boolean        reduce using rule 73
	integer        reduce using rule 73
	char           reduce using rule 73
	'('            reduce using rule 73
	')'            reduce using rule 73
	void           reduce using rule 73
	'+'            reduce using rule 73
	'/'            reduce using rule 73
	'*'            reduce using rule 73
	'-'            reduce using rule 73
	'='            reduce using rule 73
	'+='           reduce using rule 73
	'-='           reduce using rule 73
	'*='           reduce using rule 73
	'/='           reduce using rule 73
	'%='           reduce using rule 73
	'<<='          reduce using rule 73
	'>>='          reduce using rule 73
	'>>>='         reduce using rule 73
	'^='           reduce using rule 73
	'|='           reduce using rule 73
	'&='           reduce using rule 73
	'||'           reduce using rule 73
	'&&'           reduce using rule 73
	'|'            reduce using rule 73
	'^'            reduce using rule 73
	'&'            reduce using rule 73
	'>>'           reduce using rule 73
	'<<'           reduce using rule 73
	'>>>'          reduce using rule 73
	'%'            reduce using rule 73
	'!'            reduce using rule 73
	literal_int    reduce using rule 73
	stringliteral  reduce using rule 73
	boolliteral    reduce using rule 73
	if             reduce using rule 73
	else           reduce using rule 73
	return         reduce using rule 73
	while          reduce using rule 73
	do             reduce using rule 73
	new            reduce using rule 73


State 134

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp '/' exp .                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 75
	'}'            reduce using rule 75
	identifier     reduce using rule 75
	public         reduce using rule 75
	private        reduce using rule 75
	final          reduce using rule 75
	static         reduce using rule 75
	null           reduce using rule 75
	boolean        reduce using rule 75
	integer        reduce using rule 75
	char           reduce using rule 75
	'('            reduce using rule 75
	')'            reduce using rule 75
	void           reduce using rule 75
	'+'            reduce using rule 75
	'/'            reduce using rule 75
	'*'            reduce using rule 75
	'-'            reduce using rule 75
	'='            reduce using rule 75
	'+='           reduce using rule 75
	'-='           reduce using rule 75
	'*='           reduce using rule 75
	'/='           reduce using rule 75
	'%='           reduce using rule 75
	'<<='          reduce using rule 75
	'>>='          reduce using rule 75
	'>>>='         reduce using rule 75
	'^='           reduce using rule 75
	'|='           reduce using rule 75
	'&='           reduce using rule 75
	'||'           reduce using rule 75
	'&&'           reduce using rule 75
	'|'            reduce using rule 75
	'^'            reduce using rule 75
	'&'            reduce using rule 75
	'>>'           reduce using rule 75
	'<<'           reduce using rule 75
	'>>>'          reduce using rule 75
	'%'            reduce using rule 75
	'!'            reduce using rule 75
	literal_int    reduce using rule 75
	stringliteral  reduce using rule 75
	boolliteral    reduce using rule 75
	if             reduce using rule 75
	else           reduce using rule 75
	return         reduce using rule 75
	while          reduce using rule 75
	do             reduce using rule 75
	new            reduce using rule 75


State 135

	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp '+' exp .                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 72
	'}'            reduce using rule 72
	identifier     reduce using rule 72
	public         reduce using rule 72
	private        reduce using rule 72
	final          reduce using rule 72
	static         reduce using rule 72
	null           reduce using rule 72
	boolean        reduce using rule 72
	integer        reduce using rule 72
	char           reduce using rule 72
	'('            reduce using rule 72
	')'            reduce using rule 72
	void           reduce using rule 72
	'+'            reduce using rule 72
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            reduce using rule 72
	'='            reduce using rule 72
	'+='           reduce using rule 72
	'-='           reduce using rule 72
	'*='           reduce using rule 72
	'/='           reduce using rule 72
	'%='           reduce using rule 72
	'<<='          reduce using rule 72
	'>>='          reduce using rule 72
	'>>>='         reduce using rule 72
	'^='           reduce using rule 72
	'|='           reduce using rule 72
	'&='           reduce using rule 72
	'||'           reduce using rule 72
	'&&'           reduce using rule 72
	'|'            reduce using rule 72
	'^'            reduce using rule 72
	'&'            reduce using rule 72
	'>>'           reduce using rule 72
	'<<'           reduce using rule 72
	'>>>'          reduce using rule 72
	'%'            shift, and enter state 102
	'!'            reduce using rule 72
	literal_int    reduce using rule 72
	stringliteral  reduce using rule 72
	boolliteral    reduce using rule 72
	if             reduce using rule 72
	else           reduce using rule 72
	return         reduce using rule 72
	while          reduce using rule 72
	do             reduce using rule 72
	new            reduce using rule 72


State 136

	statements -> statements statement .                (rule 32)

	'{'            reduce using rule 32
	'}'            reduce using rule 32
	identifier     reduce using rule 32
	null           reduce using rule 32
	boolean        reduce using rule 32
	integer        reduce using rule 32
	char           reduce using rule 32
	'('            reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'!'            reduce using rule 32
	literal_int    reduce using rule 32
	stringliteral  reduce using rule 32
	boolliteral    reduce using rule 32
	if             reduce using rule 32
	return         reduce using rule 32
	while          reduce using rule 32
	do             reduce using rule 32
	new            reduce using rule 32


State 137

	statement -> '{' statements '}' .                   (rule 23)

	'{'            reduce using rule 23
	'}'            reduce using rule 23
	identifier     reduce using rule 23
	public         reduce using rule 23
	private        reduce using rule 23
	final          reduce using rule 23
	static         reduce using rule 23
	null           reduce using rule 23
	boolean        reduce using rule 23
	integer        reduce using rule 23
	char           reduce using rule 23
	'('            reduce using rule 23
	void           reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'!'            reduce using rule 23
	literal_int    reduce using rule 23
	stringliteral  reduce using rule 23
	boolliteral    reduce using rule 23
	if             reduce using rule 23
	else           reduce using rule 23
	return         reduce using rule 23
	while          reduce using rule 23
	do             reduce using rule 23
	new            reduce using rule 23


State 138

	exp -> '(' exp ')' .                                (rule 67)

	'{'            reduce using rule 67
	'}'            reduce using rule 67
	identifier     reduce using rule 67
	public         reduce using rule 67
	private        reduce using rule 67
	final          reduce using rule 67
	static         reduce using rule 67
	null           reduce using rule 67
	boolean        reduce using rule 67
	integer        reduce using rule 67
	char           reduce using rule 67
	'('            reduce using rule 67
	')'            reduce using rule 67
	void           reduce using rule 67
	'+'            reduce using rule 67
	'/'            reduce using rule 67
	'*'            reduce using rule 67
	'-'            reduce using rule 67
	'='            reduce using rule 67
	'+='           reduce using rule 67
	'-='           reduce using rule 67
	'*='           reduce using rule 67
	'/='           reduce using rule 67
	'%='           reduce using rule 67
	'<<='          reduce using rule 67
	'>>='          reduce using rule 67
	'>>>='         reduce using rule 67
	'^='           reduce using rule 67
	'|='           reduce using rule 67
	'&='           reduce using rule 67
	'||'           reduce using rule 67
	'&&'           reduce using rule 67
	'|'            reduce using rule 67
	'^'            reduce using rule 67
	'&'            reduce using rule 67
	'>>'           reduce using rule 67
	'<<'           reduce using rule 67
	'>>>'          reduce using rule 67
	'%'            reduce using rule 67
	'!'            reduce using rule 67
	literal_int    reduce using rule 67
	stringliteral  reduce using rule 67
	boolliteral    reduce using rule 67
	if             reduce using rule 67
	else           reduce using rule 67
	return         reduce using rule 67
	while          reduce using rule 67
	do             reduce using rule 67
	new            reduce using rule 67


State 139

	exp -> '(' type ')' . exp                           (rule 66)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 151
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 140

	statement -> if '(' exp . ')' statement             (rule 25)
	statement -> if '(' exp . ')' statement else statement    (rule 26)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	')'            shift, and enter state 150
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102


State 141

	statement -> while '(' exp . ')' statement          (rule 29)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	')'            shift, and enter state 149
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102


State 142

	statement -> do statement while . '(' exp ')'       (rule 30)

	'('            shift, and enter state 148


State 143

	newstatement -> new type '(' . parameters ')'       (rule 36)
	newstatement -> new type '(' . ')'                  (rule 37)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	')'            shift, and enter state 147
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	parameters     goto state 145
	exp            goto state 146
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 144

	functionhead -> modifiers functiontype identifier functionparameters .    (rule 16)

	'{'            reduce using rule 16
	identifier     reduce using rule 16
	null           reduce using rule 16
	boolean        reduce using rule 16
	integer        reduce using rule 16
	char           reduce using rule 16
	'('            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'!'            reduce using rule 16
	literal_int    reduce using rule 16
	stringliteral  reduce using rule 16
	boolliteral    reduce using rule 16
	if             reduce using rule 16
	return         reduce using rule 16
	while          reduce using rule 16
	do             reduce using rule 16
	new            reduce using rule 16


State 145

	newstatement -> new type '(' parameters . ')'       (rule 36)
	parameters -> parameters . exp                      (rule 50)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	')'            shift, and enter state 160
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 159
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 146

	parameters -> exp .                                 (rule 51)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	null           reduce using rule 51
	'('            reduce using rule 51
	')'            reduce using rule 51
	'+'            shift, and enter state 78
			(reduce using rule 51)

	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
			(reduce using rule 51)

	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 51
	literal_int    reduce using rule 51
	stringliteral  reduce using rule 51
	boolliteral    reduce using rule 51


State 147

	newstatement -> new type '(' ')' .                  (rule 37)

	'{'            reduce using rule 37
	'}'            reduce using rule 37
	identifier     reduce using rule 37
	public         reduce using rule 37
	private        reduce using rule 37
	final          reduce using rule 37
	static         reduce using rule 37
	null           reduce using rule 37
	boolean        reduce using rule 37
	integer        reduce using rule 37
	char           reduce using rule 37
	'('            reduce using rule 37
	void           reduce using rule 37
	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'!'            reduce using rule 37
	literal_int    reduce using rule 37
	stringliteral  reduce using rule 37
	boolliteral    reduce using rule 37
	if             reduce using rule 37
	else           reduce using rule 37
	return         reduce using rule 37
	while          reduce using rule 37
	do             reduce using rule 37
	new            reduce using rule 37


State 148

	statement -> do statement while '(' . exp ')'       (rule 30)

	null           shift, and enter state 48
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55

	exp            goto state 158
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 149

	statement -> while '(' exp ')' . statement          (rule 29)

	'{'            shift, and enter state 47
	identifier     shift, and enter state 30
	null           shift, and enter state 48
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55
	if             shift, and enter state 56
	return         shift, and enter state 57
	while          shift, and enter state 58
	do             shift, and enter state 59
	new            shift, and enter state 60

	statement      goto state 157
	statementexpstatementgoto state 39
	newstatement   goto state 40
	assignmentstatementgoto state 41
	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 42
	primitivetype  goto state 26
	referencetype  goto state 27
	exp            goto state 43
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 150

	statement -> if '(' exp ')' . statement             (rule 25)
	statement -> if '(' exp ')' . statement else statement    (rule 26)

	'{'            shift, and enter state 47
	identifier     shift, and enter state 30
	null           shift, and enter state 48
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55
	if             shift, and enter state 56
	return         shift, and enter state 57
	while          shift, and enter state 58
	do             shift, and enter state 59
	new            shift, and enter state 60

	statement      goto state 156
	statementexpstatementgoto state 39
	newstatement   goto state 40
	assignmentstatementgoto state 41
	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 42
	primitivetype  goto state 26
	referencetype  goto state 27
	exp            goto state 43
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 151

	exp -> '(' type ')' exp .                           (rule 66)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	'{'            reduce using rule 66
	'}'            reduce using rule 66
	identifier     reduce using rule 66
	public         reduce using rule 66
	private        reduce using rule 66
	final          reduce using rule 66
	static         reduce using rule 66
	null           reduce using rule 66
	boolean        reduce using rule 66
	integer        reduce using rule 66
	char           reduce using rule 66
	'('            reduce using rule 66
	')'            reduce using rule 66
	void           reduce using rule 66
	'+'            reduce using rule 66
	'/'            reduce using rule 66
	'*'            reduce using rule 66
	'-'            reduce using rule 66
	'='            reduce using rule 66
	'+='           reduce using rule 66
	'-='           reduce using rule 66
	'*='           reduce using rule 66
	'/='           reduce using rule 66
	'%='           reduce using rule 66
	'<<='          reduce using rule 66
	'>>='          reduce using rule 66
	'>>>='         reduce using rule 66
	'^='           reduce using rule 66
	'|='           reduce using rule 66
	'&='           reduce using rule 66
	'||'           reduce using rule 66
	'&&'           reduce using rule 66
	'|'            reduce using rule 66
	'^'            reduce using rule 66
	'&'            reduce using rule 66
	'>>'           reduce using rule 66
	'<<'           reduce using rule 66
	'>>>'          reduce using rule 66
	'%'            reduce using rule 66
	'!'            reduce using rule 66
	literal_int    reduce using rule 66
	stringliteral  reduce using rule 66
	boolliteral    reduce using rule 66
	if             reduce using rule 66
	else           reduce using rule 66
	return         reduce using rule 66
	while          reduce using rule 66
	do             reduce using rule 66
	new            reduce using rule 66


State 152

	formalparameter -> type identifier .                (rule 21)

	')'            reduce using rule 21
	','            reduce using rule 21


State 153

	functionparameters -> '(' formalparameters ')' .    (rule 17)

	'{'            reduce using rule 17
	identifier     reduce using rule 17
	null           reduce using rule 17
	boolean        reduce using rule 17
	integer        reduce using rule 17
	char           reduce using rule 17
	'('            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'!'            reduce using rule 17
	literal_int    reduce using rule 17
	stringliteral  reduce using rule 17
	boolliteral    reduce using rule 17
	if             reduce using rule 17
	return         reduce using rule 17
	while          reduce using rule 17
	do             reduce using rule 17
	new            reduce using rule 17


State 154

	formalparameters -> formalparameters ',' . formalparameter    (rule 19)

	identifier     shift, and enter state 30
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33

	formalparametergoto state 155
	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 109
	primitivetype  goto state 26
	referencetype  goto state 27

State 155

	formalparameters -> formalparameters ',' formalparameter .    (rule 19)

	')'            reduce using rule 19
	','            reduce using rule 19


State 156

	statement -> if '(' exp ')' statement .             (rule 25)
	statement -> if '(' exp ')' statement . else statement    (rule 26)

	'{'            reduce using rule 25
	'}'            reduce using rule 25
	identifier     reduce using rule 25
	public         reduce using rule 25
	private        reduce using rule 25
	final          reduce using rule 25
	static         reduce using rule 25
	null           reduce using rule 25
	boolean        reduce using rule 25
	integer        reduce using rule 25
	char           reduce using rule 25
	'('            reduce using rule 25
	void           reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'!'            reduce using rule 25
	literal_int    reduce using rule 25
	stringliteral  reduce using rule 25
	boolliteral    reduce using rule 25
	if             reduce using rule 25
	else           shift, and enter state 162
			(reduce using rule 25)

	return         reduce using rule 25
	while          reduce using rule 25
	do             reduce using rule 25
	new            reduce using rule 25


State 157

	statement -> while '(' exp ')' statement .          (rule 29)

	'{'            reduce using rule 29
	'}'            reduce using rule 29
	identifier     reduce using rule 29
	public         reduce using rule 29
	private        reduce using rule 29
	final          reduce using rule 29
	static         reduce using rule 29
	null           reduce using rule 29
	boolean        reduce using rule 29
	integer        reduce using rule 29
	char           reduce using rule 29
	'('            reduce using rule 29
	void           reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'!'            reduce using rule 29
	literal_int    reduce using rule 29
	stringliteral  reduce using rule 29
	boolliteral    reduce using rule 29
	if             reduce using rule 29
	else           reduce using rule 29
	return         reduce using rule 29
	while          reduce using rule 29
	do             reduce using rule 29
	new            reduce using rule 29


State 158

	statement -> do statement while '(' exp . ')'       (rule 30)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	')'            shift, and enter state 161
	'+'            shift, and enter state 78
	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102


State 159

	parameters -> parameters exp .                      (rule 50)
	infixexp -> exp . '+' exp                           (rule 72)
	infixexp -> exp . '*' exp                           (rule 73)
	infixexp -> exp . '-' exp                           (rule 74)
	infixexp -> exp . '/' exp                           (rule 75)
	infixexp -> exp . '%' exp                           (rule 76)
	infixexp -> exp . '<<' exp                          (rule 77)
	infixexp -> exp . '>>' exp                          (rule 78)
	infixexp -> exp . '>>>' exp                         (rule 79)
	infixexp -> exp . '&' exp                           (rule 80)
	infixexp -> exp . '|' exp                           (rule 81)
	infixexp -> exp . '^' exp                           (rule 82)
	infixexp -> exp . '&&' exp                          (rule 83)
	infixexp -> exp . '||' exp                          (rule 84)

	null           reduce using rule 50
	'('            reduce using rule 50
	')'            reduce using rule 50
	'+'            shift, and enter state 78
			(reduce using rule 50)

	'/'            shift, and enter state 79
	'*'            shift, and enter state 80
	'-'            shift, and enter state 81
			(reduce using rule 50)

	'||'           shift, and enter state 94
	'&&'           shift, and enter state 95
	'|'            shift, and enter state 96
	'^'            shift, and enter state 97
	'&'            shift, and enter state 98
	'>>'           shift, and enter state 99
	'<<'           shift, and enter state 100
	'>>>'          shift, and enter state 101
	'%'            shift, and enter state 102
	'!'            reduce using rule 50
	literal_int    reduce using rule 50
	stringliteral  reduce using rule 50
	boolliteral    reduce using rule 50


State 160

	newstatement -> new type '(' parameters ')' .       (rule 36)

	'{'            reduce using rule 36
	'}'            reduce using rule 36
	identifier     reduce using rule 36
	public         reduce using rule 36
	private        reduce using rule 36
	final          reduce using rule 36
	static         reduce using rule 36
	null           reduce using rule 36
	boolean        reduce using rule 36
	integer        reduce using rule 36
	char           reduce using rule 36
	'('            reduce using rule 36
	void           reduce using rule 36
	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'!'            reduce using rule 36
	literal_int    reduce using rule 36
	stringliteral  reduce using rule 36
	boolliteral    reduce using rule 36
	if             reduce using rule 36
	else           reduce using rule 36
	return         reduce using rule 36
	while          reduce using rule 36
	do             reduce using rule 36
	new            reduce using rule 36


State 161

	statement -> do statement while '(' exp ')' .       (rule 30)

	'{'            reduce using rule 30
	'}'            reduce using rule 30
	identifier     reduce using rule 30
	public         reduce using rule 30
	private        reduce using rule 30
	final          reduce using rule 30
	static         reduce using rule 30
	null           reduce using rule 30
	boolean        reduce using rule 30
	integer        reduce using rule 30
	char           reduce using rule 30
	'('            reduce using rule 30
	void           reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'!'            reduce using rule 30
	literal_int    reduce using rule 30
	stringliteral  reduce using rule 30
	boolliteral    reduce using rule 30
	if             reduce using rule 30
	else           reduce using rule 30
	return         reduce using rule 30
	while          reduce using rule 30
	do             reduce using rule 30
	new            reduce using rule 30


State 162

	statement -> if '(' exp ')' statement else . statement    (rule 26)

	'{'            shift, and enter state 47
	identifier     shift, and enter state 30
	null           shift, and enter state 48
	boolean        shift, and enter state 31
	integer        shift, and enter state 32
	char           shift, and enter state 33
	'('            shift, and enter state 49
	'+'            shift, and enter state 50
	'-'            shift, and enter state 51
	'!'            shift, and enter state 52
	literal_int    shift, and enter state 53
	stringliteral  shift, and enter state 54
	boolliteral    shift, and enter state 55
	if             shift, and enter state 56
	return         shift, and enter state 57
	while          shift, and enter state 58
	do             shift, and enter state 59
	new            shift, and enter state 60

	statement      goto state 163
	statementexpstatementgoto state 39
	newstatement   goto state 40
	assignmentstatementgoto state 41
	name           goto state 22
	simplename     goto state 23
	qualifiedname  goto state 24
	type           goto state 42
	primitivetype  goto state 26
	referencetype  goto state 27
	exp            goto state 43
	infixexp       goto state 44
	unaryexp       goto state 45
	intliteral     goto state 46

State 163

	statement -> if '(' exp ')' statement else statement .    (rule 26)

	'{'            reduce using rule 26
	'}'            reduce using rule 26
	identifier     reduce using rule 26
	public         reduce using rule 26
	private        reduce using rule 26
	final          reduce using rule 26
	static         reduce using rule 26
	null           reduce using rule 26
	boolean        reduce using rule 26
	integer        reduce using rule 26
	char           reduce using rule 26
	'('            reduce using rule 26
	void           reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'!'            reduce using rule 26
	literal_int    reduce using rule 26
	stringliteral  reduce using rule 26
	boolliteral    reduce using rule 26
	if             reduce using rule 26
	else           reduce using rule 26
	return         reduce using rule 26
	while          reduce using rule 26
	do             reduce using rule 26
	new            reduce using rule 26


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 89
Number of terminals: 62
Number of non-terminals: 30
Number of states: 164
